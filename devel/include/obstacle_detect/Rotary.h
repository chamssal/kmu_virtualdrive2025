// Generated by gencpp from file obstacle_detect/Rotary.msg
// DO NOT EDIT!


#ifndef OBSTACLE_DETECT_MESSAGE_ROTARY_H
#define OBSTACLE_DETECT_MESSAGE_ROTARY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace obstacle_detect
{
template <class ContainerAllocator>
struct Rotary_
{
  typedef Rotary_<ContainerAllocator> Type;

  Rotary_()
    : dis(0.0)
    , orientation(0)  {
    }
  Rotary_(const ContainerAllocator& _alloc)
    : dis(0.0)
    , orientation(0)  {
  (void)_alloc;
    }



   typedef float _dis_type;
  _dis_type dis;

   typedef uint8_t _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::obstacle_detect::Rotary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_detect::Rotary_<ContainerAllocator> const> ConstPtr;

}; // struct Rotary_

typedef ::obstacle_detect::Rotary_<std::allocator<void> > Rotary;

typedef boost::shared_ptr< ::obstacle_detect::Rotary > RotaryPtr;
typedef boost::shared_ptr< ::obstacle_detect::Rotary const> RotaryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obstacle_detect::Rotary_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obstacle_detect::Rotary_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::obstacle_detect::Rotary_<ContainerAllocator1> & lhs, const ::obstacle_detect::Rotary_<ContainerAllocator2> & rhs)
{
  return lhs.dis == rhs.dis &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::obstacle_detect::Rotary_<ContainerAllocator1> & lhs, const ::obstacle_detect::Rotary_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace obstacle_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::obstacle_detect::Rotary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detect::Rotary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detect::Rotary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detect::Rotary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detect::Rotary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detect::Rotary_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obstacle_detect::Rotary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39ade22c37643b134f50ecdaa9e4a0e7";
  }

  static const char* value(const ::obstacle_detect::Rotary_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39ade22c37643b13ULL;
  static const uint64_t static_value2 = 0x4f50ecdaa9e4a0e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_detect::Rotary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obstacle_detect/Rotary";
  }

  static const char* value(const ::obstacle_detect::Rotary_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obstacle_detect::Rotary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 dis\n"
"uint8 orientation\n"
;
  }

  static const char* value(const ::obstacle_detect::Rotary_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obstacle_detect::Rotary_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dis);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rotary_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_detect::Rotary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obstacle_detect::Rotary_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "dis: ";
    Printer<float>::stream(s, indent + "  ", v.dis);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_DETECT_MESSAGE_ROTARY_H
