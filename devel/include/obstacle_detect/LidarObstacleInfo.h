// Generated by gencpp from file obstacle_detect/LidarObstacleInfo.msg
// DO NOT EDIT!


#ifndef OBSTACLE_DETECT_MESSAGE_LIDAROBSTACLEINFO_H
#define OBSTACLE_DETECT_MESSAGE_LIDAROBSTACLEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace obstacle_detect
{
template <class ContainerAllocator>
struct LidarObstacleInfo_
{
  typedef LidarObstacleInfo_<ContainerAllocator> Type;

  LidarObstacleInfo_()
    : obst_x(0.0)
    , obst_y(0.0)  {
    }
  LidarObstacleInfo_(const ContainerAllocator& _alloc)
    : obst_x(0.0)
    , obst_y(0.0)  {
  (void)_alloc;
    }



   typedef float _obst_x_type;
  _obst_x_type obst_x;

   typedef float _obst_y_type;
  _obst_y_type obst_y;





  typedef boost::shared_ptr< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> const> ConstPtr;

}; // struct LidarObstacleInfo_

typedef ::obstacle_detect::LidarObstacleInfo_<std::allocator<void> > LidarObstacleInfo;

typedef boost::shared_ptr< ::obstacle_detect::LidarObstacleInfo > LidarObstacleInfoPtr;
typedef boost::shared_ptr< ::obstacle_detect::LidarObstacleInfo const> LidarObstacleInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator1> & lhs, const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator2> & rhs)
{
  return lhs.obst_x == rhs.obst_x &&
    lhs.obst_y == rhs.obst_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator1> & lhs, const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace obstacle_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29acf9247b80e40f99626c6dd6c9f858";
  }

  static const char* value(const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29acf9247b80e40fULL;
  static const uint64_t static_value2 = 0x99626c6dd6c9f858ULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obstacle_detect/LidarObstacleInfo";
  }

  static const char* value(const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 obst_x\n"
"float32 obst_y\n"
;
  }

  static const char* value(const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obst_x);
      stream.next(m.obst_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LidarObstacleInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obstacle_detect::LidarObstacleInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "obst_x: ";
    Printer<float>::stream(s, indent + "  ", v.obst_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "obst_y: ";
    Printer<float>::stream(s, indent + "  ", v.obst_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_DETECT_MESSAGE_LIDAROBSTACLEINFO_H
