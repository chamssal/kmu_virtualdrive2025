// Generated by gencpp from file obstacle_detect/RotaryArray.msg
// DO NOT EDIT!


#ifndef OBSTACLE_DETECT_MESSAGE_ROTARYARRAY_H
#define OBSTACLE_DETECT_MESSAGE_ROTARYARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <obstacle_detect/Rotary.h>

namespace obstacle_detect
{
template <class ContainerAllocator>
struct RotaryArray_
{
  typedef RotaryArray_<ContainerAllocator> Type;

  RotaryArray_()
    : moving_cars()  {
    }
  RotaryArray_(const ContainerAllocator& _alloc)
    : moving_cars(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::obstacle_detect::Rotary_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::obstacle_detect::Rotary_<ContainerAllocator> >> _moving_cars_type;
  _moving_cars_type moving_cars;





  typedef boost::shared_ptr< ::obstacle_detect::RotaryArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_detect::RotaryArray_<ContainerAllocator> const> ConstPtr;

}; // struct RotaryArray_

typedef ::obstacle_detect::RotaryArray_<std::allocator<void> > RotaryArray;

typedef boost::shared_ptr< ::obstacle_detect::RotaryArray > RotaryArrayPtr;
typedef boost::shared_ptr< ::obstacle_detect::RotaryArray const> RotaryArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obstacle_detect::RotaryArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obstacle_detect::RotaryArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::obstacle_detect::RotaryArray_<ContainerAllocator1> & lhs, const ::obstacle_detect::RotaryArray_<ContainerAllocator2> & rhs)
{
  return lhs.moving_cars == rhs.moving_cars;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::obstacle_detect::RotaryArray_<ContainerAllocator1> & lhs, const ::obstacle_detect::RotaryArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace obstacle_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::obstacle_detect::RotaryArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detect::RotaryArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detect::RotaryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detect::RotaryArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detect::RotaryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detect::RotaryArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obstacle_detect::RotaryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f4d8ffc9ddc00a08e234a44d62c525f";
  }

  static const char* value(const ::obstacle_detect::RotaryArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f4d8ffc9ddc00a0ULL;
  static const uint64_t static_value2 = 0x8e234a44d62c525fULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_detect::RotaryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obstacle_detect/RotaryArray";
  }

  static const char* value(const ::obstacle_detect::RotaryArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obstacle_detect::RotaryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Rotary[] moving_cars\n"
"\n"
"================================================================================\n"
"MSG: obstacle_detect/Rotary\n"
"float32 dis\n"
"uint8 orientation\n"
;
  }

  static const char* value(const ::obstacle_detect::RotaryArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obstacle_detect::RotaryArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.moving_cars);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RotaryArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_detect::RotaryArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obstacle_detect::RotaryArray_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "moving_cars: ";
    if (v.moving_cars.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.moving_cars.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::obstacle_detect::Rotary_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.moving_cars[i]);
    }
    if (v.moving_cars.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_DETECT_MESSAGE_ROTARYARRAY_H
