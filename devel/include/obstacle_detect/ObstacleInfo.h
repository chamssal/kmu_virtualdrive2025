// Generated by gencpp from file obstacle_detect/ObstacleInfo.msg
// DO NOT EDIT!


#ifndef OBSTACLE_DETECT_MESSAGE_OBSTACLEINFO_H
#define OBSTACLE_DETECT_MESSAGE_OBSTACLEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace obstacle_detect
{
template <class ContainerAllocator>
struct ObstacleInfo_
{
  typedef ObstacleInfo_<ContainerAllocator> Type;

  ObstacleInfo_()
    : distance(0.0)
    , x(0.0)
    , y(0.0)
    , is_dynamic(false)  {
    }
  ObstacleInfo_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , x(0.0)
    , y(0.0)
    , is_dynamic(false)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef uint8_t _is_dynamic_type;
  _is_dynamic_type is_dynamic;





  typedef boost::shared_ptr< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleInfo_

typedef ::obstacle_detect::ObstacleInfo_<std::allocator<void> > ObstacleInfo;

typedef boost::shared_ptr< ::obstacle_detect::ObstacleInfo > ObstacleInfoPtr;
typedef boost::shared_ptr< ::obstacle_detect::ObstacleInfo const> ObstacleInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obstacle_detect::ObstacleInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::obstacle_detect::ObstacleInfo_<ContainerAllocator1> & lhs, const ::obstacle_detect::ObstacleInfo_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.is_dynamic == rhs.is_dynamic;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::obstacle_detect::ObstacleInfo_<ContainerAllocator1> & lhs, const ::obstacle_detect::ObstacleInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace obstacle_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7e905afe1b508f817d944c9fa98688a";
  }

  static const char* value(const ::obstacle_detect::ObstacleInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7e905afe1b508f8ULL;
  static const uint64_t static_value2 = 0x17d944c9fa98688aULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obstacle_detect/ObstacleInfo";
  }

  static const char* value(const ::obstacle_detect::ObstacleInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 distance\n"
"float32 x\n"
"float32 y\n"
"bool is_dynamic\n"
;
  }

  static const char* value(const ::obstacle_detect::ObstacleInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.is_dynamic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_detect::ObstacleInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obstacle_detect::ObstacleInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "is_dynamic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dynamic);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_DETECT_MESSAGE_OBSTACLEINFO_H
